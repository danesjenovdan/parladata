# Generated by Django 2.2.14 on 2020-08-10 12:45

from django.db import migrations, models
import django.db.models.deletion
import parladata.models
import taggit.managers
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgendaItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.TextField(blank=True, help_text='The name of agenda', null=True)),
                ('date', models.DateTimeField(blank=True, help_text='Date of the item.', null=True)),
                ('order', models.IntegerField(blank=True, help_text='Order of agenda item', null=True)),
                ('gov_id', models.CharField(blank=True, help_text='gov_id of agenda item', max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(help_text='Area name', max_length=128, verbose_name='name')),
                ('identifier', models.CharField(blank=True, help_text='Area identifier', max_length=128, null=True, verbose_name='identifier')),
                ('calssification', models.CharField(blank=True, help_text='Area classification (Unit/Region)', max_length=128, null=True, verbose_name='classification')),
                ('parent', models.ForeignKey(blank=True, help_text='Area parent', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Area')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContactDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('label', models.CharField(blank=True, help_text='A human-readable label for the contact detail', max_length=128, null=True, verbose_name='label')),
                ('contact_type', models.CharField(choices=[('FAX', 'Fax'), ('PHONE', 'Telephone'), ('MOBILE', 'Mobile'), ('EMAIL', 'Email'), ('MAIL', 'Snail mail'), ('TWITTER', 'Twitter'), ('FACEBOOK', 'Facebook'), ('LINKEDIN', 'LinkedIn')], help_text="A type of medium, e.g. 'fax' or 'email'", max_length=12, verbose_name='type')),
                ('value', models.CharField(help_text='A value, e.g. a phone number or email address', max_length=128, verbose_name='value')),
                ('note', models.CharField(blank=True, help_text='A note, e.g. for grouping contact details by physical location', max_length=128, null=True, verbose_name='note')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Debate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('order', models.IntegerField(blank=True, help_text='Order of debate', null=True)),
                ('date', models.DateTimeField(blank=True, help_text='Date of the item.', null=True)),
                ('gov_id', models.CharField(blank=True, help_text='gov_id of debate', max_length=255, null=True)),
                ('agenda_item', models.ManyToManyField(blank=True, help_text='Agenda item', related_name='debates', to='parladata.AgendaItem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('url', models.URLField(help_text='A URL', max_length=350, verbose_name='url')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Wikipedia page'", max_length=256, null=True, verbose_name='note')),
                ('name', models.TextField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mandate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('label', models.CharField(blank=True, help_text='A label describing the membership', max_length=128, null=True, verbose_name='label')),
                ('role', models.CharField(blank=True, help_text='The role that the person fulfills in the organization', max_length=128, null=True, verbose_name='role')),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Motion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('uid', models.CharField(blank=True, help_text='motions uid from DZ page', max_length=64, null=True)),
                ('gov_id', models.CharField(blank=True, help_text='Government website id', max_length=255, null=True)),
                ('date', models.DateTimeField(blank=True, help_text='The date when the motion was proposed', null=True)),
                ('recap', models.TextField(blank=True, help_text='Motion summary', null=True)),
                ('text', models.TextField(blank=True, help_text='The text of the motion', null=True)),
                ('classification', models.CharField(blank=True, help_text='Motion classification', max_length=128, null=True)),
                ('title', models.TextField(blank=True, help_text='Title motion', null=True)),
                ('doc_title', models.TextField(blank=True, help_text='Title of document', null=True)),
                ('requirement', models.CharField(blank=True, help_text='The requirement for the motion to pass', max_length=128, null=True)),
                ('result', models.CharField(blank=True, help_text='Did the motion pass?', max_length=128, null=True)),
                ('epa', models.CharField(blank=True, help_text='EPA number', max_length=255, null=True)),
                ('agenda_item', models.ManyToManyField(blank=True, help_text='Agenda item', related_name='motions', to='parladata.AgendaItem')),
                ('debate', models.ForeignKey(blank=True, help_text='Debates', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='motions', to='parladata.Debate')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('_name', models.TextField(help_text='A primary name, e.g. a legally recognized name', verbose_name='name')),
                ('name_parser', models.CharField(blank=True, help_text='Name for parser.', max_length=1024, null=True)),
                ('_acronym', models.CharField(blank=True, help_text='Organization acronym', max_length=128, null=True, verbose_name='acronym')),
                ('gov_id', models.TextField(blank=True, help_text='Gov website ID', null=True, verbose_name='Gov website ID')),
                ('classification', models.CharField(blank=True, help_text='An organization category, e.g. committee', max_length=128, null=True, verbose_name='classification')),
                ('dissolution_date', models.DateTimeField(blank=True, help_text='A date of dissolution', null=True)),
                ('founding_date', models.DateTimeField(blank=True, help_text='A date of founding', null=True)),
                ('description', models.TextField(blank=True, help_text='Organization description', null=True)),
                ('is_coalition', models.IntegerField(blank=True, help_text='1 if coalition, -1 if not, 0 if it does not apply', null=True)),
                ('voters', models.IntegerField(blank=True, help_text='number of votes cast for this person in their district', null=True, verbose_name='voters')),
                ('parent', models.ForeignKey(blank=True, help_text='The organization that contains this organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='parladata.Organization')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(help_text="A person's preferred full name", max_length=128, verbose_name='name')),
                ('name_parser', models.CharField(blank=True, help_text='Name for parser.', max_length=500, null=True)),
                ('classification', models.CharField(blank=True, help_text='Classification for sorting purposes.', max_length=128, null=True, verbose_name='classification')),
                ('family_name', models.CharField(blank=True, help_text='One or more family names', max_length=128, null=True, verbose_name='family name')),
                ('given_name', models.CharField(blank=True, help_text='One or more primary given names', max_length=128, null=True, verbose_name='given name')),
                ('additional_name', models.CharField(blank=True, help_text='One or more secondary given names', max_length=128, null=True, verbose_name='additional name')),
                ('honorific_prefix', models.CharField(blank=True, help_text="One or more honorifics preceding a person's name", max_length=128, null=True, verbose_name='honorific prefix')),
                ('honorific_suffix', models.CharField(blank=True, help_text="One or more honorifics following a person's name", max_length=128, null=True, verbose_name='honorific suffix')),
                ('patronymic_name', models.CharField(blank=True, help_text='One or more patronymic names', max_length=128, null=True, verbose_name='patronymic name')),
                ('sort_name', models.CharField(blank=True, help_text='A name to use in an lexicographically ordered list', max_length=128, null=True, verbose_name='sort name')),
                ('previous_occupation', models.TextField(blank=True, help_text="The person's previous occupation", null=True, verbose_name='previous occupation')),
                ('education', models.TextField(blank=True, help_text="The person's education", null=True, verbose_name='education')),
                ('education_level', models.TextField(blank=True, help_text="The person's education level", null=True, verbose_name='education level')),
                ('mandates', models.IntegerField(blank=True, help_text="Person's number of mandates, including the current one", null=True, verbose_name='mandates')),
                ('email', models.EmailField(blank=True, help_text='A preferred email address', max_length=254, null=True, verbose_name='email')),
                ('gender', models.CharField(blank=True, help_text='A gender', max_length=128, null=True, verbose_name='gender')),
                ('birth_date', models.DateTimeField(blank=True, help_text='A date of birth', null=True, verbose_name='date of birth')),
                ('death_date', models.DateTimeField(blank=True, help_text='A date of death', null=True, verbose_name='date of death')),
                ('summary', models.CharField(blank=True, help_text="A one-line account of a person's life", max_length=512, null=True, verbose_name='summary')),
                ('biography', models.TextField(blank=True, help_text="An extended account of a person's life", null=True, verbose_name='biography')),
                ('image', models.URLField(blank=True, help_text='A URL of a head shot', null=True, verbose_name='image')),
                ('gov_id', models.CharField(blank=True, help_text='gov website id for the scraper', max_length=255, null=True, verbose_name='gov_id')),
                ('gov_picture_url', models.URLField(blank=True, help_text='URL to gov website pic', null=True, verbose_name='gov image url')),
                ('voters', models.IntegerField(blank=True, help_text='number of votes cast for this person in their district', null=True, verbose_name='voters')),
                ('points', models.IntegerField(blank=True, default=None, help_text='number of points cast for this person', null=True, verbose_name='points')),
                ('active', models.BooleanField(default=True, help_text='a generic active or not toggle', verbose_name='active')),
                ('districts', models.ManyToManyField(blank=True, help_text='District of person', related_name='candidates', to='parladata.Area')),
                ('gov_url', models.ForeignKey(blank=True, help_text='URL to gov website profile', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gov_link', to='parladata.Link')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('label', models.CharField(blank=True, help_text='A label describing the post', max_length=128, null=True, verbose_name='label')),
                ('role', models.CharField(blank=True, help_text='The function that the holder of the post fulfills', max_length=128, null=True, verbose_name='role')),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('membership', models.ForeignKey(blank=True, help_text='The post held by the person in the organization through this membership', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='parladata.Membership')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization in which the post is held', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='parladata.Organization')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(blank=True, help_text='Session name', max_length=255, null=True)),
                ('gov_id', models.CharField(blank=True, help_text='Gov website ID.', max_length=255, null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('classification', models.CharField(blank=True, help_text='Session classification', max_length=128, null=True)),
                ('in_review', models.BooleanField(default=False, help_text='Is session in review?')),
                ('mandate', models.ForeignKey(blank=True, help_text='The mandate of this milestone.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Mandate')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization in session', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session', to='parladata.Organization')),
                ('organizations', models.ManyToManyField(help_text='The organization in session', related_name='sessions', to='parladata.Organization')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='session_deleted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('mandate_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, help_text='Session name', max_length=255, null=True)),
                ('gov_id', models.CharField(blank=True, help_text='Gov website ID.', max_length=255, null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('organization_id', models.IntegerField(blank=True, null=True)),
                ('classification', models.CharField(blank=True, help_text='Session classification', max_length=128, null=True)),
                ('in_review', models.BooleanField(default=False, help_text='Is session in review?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='tmp_votelinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('gov_id', models.CharField(blank=True, max_length=255, null=True)),
                ('votedoc_url', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(blank=True, help_text='Vote name/identifier', max_length=1000, null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('result', models.CharField(blank=True, help_text='The result of the vote', max_length=255, null=True)),
                ('epa', models.CharField(blank=True, help_text='EPA number', max_length=255, null=True)),
                ('epa_url', models.CharField(blank=True, help_text='gov url for this vote', max_length=515, null=True)),
                ('document_url', models.CharField(blank=True, help_text='"document" url for this vote', max_length=515, null=True)),
                ('counter', models.TextField(blank=True, help_text='Counter of ballot option', null=True, verbose_name='json')),
                ('motion', models.ForeignKey(blank=True, help_text='The motion for which the vote took place', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vote', to='parladata.Motion')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization whose members are voting', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('session', models.ForeignKey(blank=True, help_text='The legislative session in which the vote event occurs', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Speech',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('valid_from', models.DateTimeField(blank=True, default=None, help_text='row valid from', null=True)),
                ('valid_to', models.DateTimeField(blank=True, default=None, help_text='row valid to', null=True)),
                ('content', models.TextField(help_text='Words spoken')),
                ('order', models.IntegerField(blank=True, help_text='Order of speech', null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('version_con', models.IntegerField(blank=True, help_text='Order of speech', null=True)),
                ('agenda_item', models.ForeignKey(blank=True, help_text='Agenda item', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='speeches', to='parladata.AgendaItem')),
                ('agenda_items', models.ManyToManyField(blank=True, help_text='Agenda items', related_name='speeches_many', to='parladata.AgendaItem')),
                ('debate', models.ForeignKey(blank=True, help_text='Debates', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='speeches', to='parladata.Debate')),
                ('party', models.ForeignKey(blank=True, default=2, help_text='The party of the person making the speech', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('session', models.ForeignKey(blank=True, help_text='Speech session', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session')),
                ('speaker', models.ForeignKey(help_text='Person making the speech', on_delete=django.db.models.deletion.CASCADE, to='parladata.Person')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('url', models.URLField(help_text='A URL', verbose_name='url')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Parliament website'", max_length=256, null=True, verbose_name='note')),
                ('contact_detail', models.ForeignKey(blank=True, help_text='The person of this source.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.ContactDetail')),
                ('membership', models.ForeignKey(blank=True, help_text='The membership of this source.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Membership')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization of this source.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('person', models.ForeignKey(blank=True, help_text='The person of this source.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person')),
                ('post', models.ForeignKey(blank=True, help_text='The post of this source.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Post')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('date', models.DateTimeField(blank=True, help_text='Date of the question.', null=True)),
                ('title', models.TextField(blank=True, help_text='Title name as written on dz-rs.si', null=True)),
                ('recipient_text', models.TextField(blank=True, help_text='Recipient name as written on dz-rs.si', null=True)),
                ('json_data', models.TextField(blank=True, help_text='Debug data', null=True, verbose_name='json')),
                ('signature', models.TextField(blank=True, help_text='Unique signature', null=True, verbose_name='Unique signature')),
                ('type_of_question', models.CharField(blank=True, max_length=64, null=True)),
                ('author_orgs', models.ManyToManyField(blank=True, help_text='The organizations of person (MP) who asked the question.', to='parladata.Organization')),
                ('authors', models.ManyToManyField(blank=True, help_text='The persons (MP) who asked the question.', to='parladata.Person')),
                ('recipient_organization', models.ManyToManyField(blank=True, help_text="Recipient organization (if it's an organization).", related_name='questions_org', to='parladata.Organization')),
                ('recipient_person', models.ManyToManyField(blank=True, help_text="Recipient person (if it's a person).", related_name='questions', to='parladata.Person')),
                ('recipient_post', models.ManyToManyField(blank=True, help_text="Recipient person's post).", related_name='questions', to='parladata.Post')),
                ('session', models.ForeignKey(blank=True, help_text='The session this question belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='An alternate or former name', max_length=128, verbose_name='name')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Birth name'", max_length=256, null=True, verbose_name='note')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization this name belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('person', models.ForeignKey(blank=True, help_text='The person this name belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.TextField(help_text='A primary name, e.g. a legally recognized name', verbose_name='name')),
                ('acronym', models.CharField(blank=True, help_text='Organization acronym', max_length=128, null=True, verbose_name='acronym')),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('organization', models.ForeignKey(help_text='The organization who hold this name.', on_delete=django.db.models.deletion.CASCADE, related_name='names', to='parladata.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time', null=True)),
                ('organization', models.ForeignKey(blank=True, help_text='The organization that is a party to the relationship', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organization_memberships', to='parladata.Organization')),
                ('parent', models.ForeignKey(blank=True, help_text='The organization which is parent in the relationship', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organization_parent_memberships', to='parladata.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='motion',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='the organization in which the motion is proposed', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization'),
        ),
        migrations.AddField(
            model_name='motion',
            name='party',
            field=models.ForeignKey(default=2, help_text='The party of the person who proposed the motion.', on_delete=django.db.models.deletion.CASCADE, related_name='motion_party', to='parladata.Organization'),
        ),
        migrations.AddField(
            model_name='motion',
            name='person',
            field=models.ForeignKey(blank=True, help_text='The person who proposed the motion', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person'),
        ),
        migrations.AddField(
            model_name='motion',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The legislative session in which the motion was proposed', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session'),
        ),
        migrations.AddField(
            model_name='motion',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(blank=True, help_text='year', null=True)),
                ('month', models.IntegerField(blank=True, help_text='month', null=True)),
                ('day', models.IntegerField(blank=True, help_text='date', null=True)),
                ('hour', models.IntegerField(blank=True, help_text='hour', null=True)),
                ('minute', models.IntegerField(blank=True, help_text='minute', null=True)),
                ('second', models.IntegerField(blank=True, help_text='second', null=True)),
                ('kind', models.CharField(blank=True, help_text='type of milestone', max_length=255, null=True)),
                ('start_or_end', models.IntegerField(blank=True, help_text='1 for start, -1 for end', null=True)),
                ('mandate', models.ForeignKey(blank=True, help_text='The mandate of this milestone.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Mandate')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization of this milestone.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('person', models.ForeignKey(blank=True, help_text='The person of this milestone.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person')),
                ('session', models.ForeignKey(blank=True, help_text='The session of this milestone.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session')),
                ('speech', models.ForeignKey(blank=True, help_text='The speech of this milestone.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Speech')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='membership',
            name='on_behalf_of',
            field=models.ForeignKey(blank=True, help_text='The organization on whose behalf the person is a party to the relationship', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_on_behalf_of', to='parladata.Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization that is a party to the relationship', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='parladata.Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='person',
            field=models.ForeignKey(blank=True, help_text='The person who is a party to the relationship', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='parladata.Person'),
        ),
        migrations.AddField(
            model_name='link',
            name='membership',
            field=models.ForeignKey(blank=True, help_text='The membership of this link.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Membership'),
        ),
        migrations.AddField(
            model_name='link',
            name='motion',
            field=models.ForeignKey(blank=True, help_text='The motion of this link.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='parladata.Motion'),
        ),
        migrations.AddField(
            model_name='link',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization of this link.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='parladata.Organization'),
        ),
        migrations.AddField(
            model_name='link',
            name='person',
            field=models.ForeignKey(blank=True, help_text='The person of this link.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person'),
        ),
        migrations.AddField(
            model_name='link',
            name='question',
            field=models.ForeignKey(blank=True, help_text='The question this link belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='parladata.Question'),
        ),
        migrations.AddField(
            model_name='link',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session'),
        ),
        migrations.AddField(
            model_name='link',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Law',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('uid', models.CharField(blank=True, help_text='law uid from DZ page', max_length=64, null=True)),
                ('text', models.TextField(blank=True, help_text='The text of the law', null=True)),
                ('epa', models.CharField(blank=True, help_text='EPA number', max_length=255, null=True)),
                ('mdt', models.CharField(blank=True, help_text='Working body text', max_length=1024, null=True)),
                ('status', models.CharField(blank=True, help_text='result of law', max_length=255, null=True)),
                ('result', models.CharField(blank=True, help_text='result of law', max_length=255, null=True)),
                ('proposer_text', models.TextField(blank=True, help_text='Proposer of law', null=True)),
                ('procedure_phase', models.CharField(blank=True, help_text='Procedure phase of law', max_length=255, null=True)),
                ('procedure', models.CharField(blank=True, help_text='Procedure of law', max_length=255, null=True)),
                ('type_of_law', models.CharField(blank=True, help_text='Type of law', max_length=255, null=True)),
                ('note', tinymce.models.HTMLField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, help_text='Date of the law.', null=True)),
                ('classification', models.CharField(blank=True, help_text='Type of law', max_length=255, null=True)),
                ('procedure_ended', models.BooleanField(default=False, help_text='Procedure phase of law', max_length=255)),
                ('mdt_fk', models.ForeignKey(blank=True, help_text='Working body obj', max_length=255, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='laws', to='parladata.Organization')),
                ('session', models.ForeignKey(blank=True, help_text='The legislative session in which the law was proposed', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ignore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('uid', models.CharField(blank=True, help_text='motions uid from DZ page', max_length=64, null=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='An issued identifier, e.g. a DUNS number', max_length=128, verbose_name='identifier')),
                ('scheme', models.CharField(blank=True, help_text='An identifier scheme, e.g. DUNS', max_length=128, null=True, verbose_name='scheme')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization this identifier belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('person', models.ForeignKey(blank=True, help_text='The person this identifier belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person')),
            ],
        ),
        migrations.AddField(
            model_name='debate',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session'),
        ),
        migrations.AddField(
            model_name='debate',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Count',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('option', models.CharField(help_text='Yes, no, abstain', max_length=128)),
                ('count', models.IntegerField(help_text='Number of votes')),
                ('vote', models.ForeignKey(blank=True, help_text='The vote of this count.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Vote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contactdetail',
            name='membership',
            field=models.ForeignKey(blank=True, help_text='The organization this name belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Membership'),
        ),
        migrations.AddField(
            model_name='contactdetail',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization this name belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization'),
        ),
        migrations.AddField(
            model_name='contactdetail',
            name='person',
            field=models.ForeignKey(blank=True, help_text='The person this name belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person'),
        ),
        migrations.AddField(
            model_name='contactdetail',
            name='post',
            field=models.ForeignKey(blank=True, help_text='The person this name belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Post'),
        ),
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('option', models.CharField(blank=True, help_text='Yes, no, abstain', max_length=128, null=True)),
                ('orgvoter', models.ForeignKey(blank=True, help_text='The voter represents and organisation.', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Organization')),
                ('vote', models.ForeignKey(help_text='The vote event', on_delete=django.db.models.deletion.CASCADE, to='parladata.Vote')),
                ('voter', models.ForeignKey(blank=True, help_text='The voter', null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Person')),
                ('voterparty', models.ForeignKey(default=2, help_text='The party of the voter.', on_delete=django.db.models.deletion.CASCADE, related_name='party', to='parladata.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agendaitem',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='parladata.Session'),
        ),
        migrations.AddField(
            model_name='agendaitem',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='ParliamentMember',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('parladata.person',),
        ),
        migrations.CreateModel(
            name='PersonEducation',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('parladata.person',),
        ),
    ]
